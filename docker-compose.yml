version: "3.3"

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - teledrop_postgres_data:/var/lib/postgresql/data/
    networks:
      - main
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  api:
    build: backend/
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      HOST_NAME: ${HOST_NAME}
      REDIS_USER: ${REDIS_USER}

    depends_on:
      - db
      - redis
    volumes:
      - ./backend/src/media:/app/src/media
    networks:
      - main

  mini_app:
    build: mini_app/
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api/
    volumes:
      - ./mini_app:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      main:
    restart: unless-stopped

  nginx:
    build: ./nginx
    ports:
      - "3333:80"
    depends_on:
      - mini_app
    volumes:
      - ./src/media:/app/src/media
    networks:
      - main

  redis:
    image: redis:6
    # environment:
      # REDIS_PASSWORD: ${REDIS_PASSWORD}
      # REDIS_USER: ${REDIS_USER}
    restart: always
    volumes:
      - redis_data:/redis/data
    networks:
      - main


volumes:
  teledrop_postgres_data:
  redis_data:

networks:
  main:
    driver: bridge